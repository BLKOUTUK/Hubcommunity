{
  "name": "BLKOUT Community Rewards",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "rewards",
        "options": {}
      },
      "id": "f2a6edc5-ee1a-4a9a-9f4e-d4b23d77b3b5",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        250,
        300
      ],
      "webhookId": "rewards-processor"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"webhookKey\"]}}",
              "value2": "blkout-rewards-webhook-secret"
            }
          ]
        }
      },
      "id": "2c9c18ec-2809-4b03-9c6e-a53b4f5bb2c8",
      "name": "Validate Webhook Key",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={ \"success\": false, \"message\": \"Invalid webhook key\" }",
        "options": {
          "responseCode": 401
        }
      },
      "id": "6b3e8f46-6e6b-4c3c-b6c0-df85adfa9e42",
      "name": "Unauthorized Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        650,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Extract the data\nconst userId = $input.item.json.userId;\nconst actionId = $input.item.json.actionId;\nconst notes = $input.item.json.notes || '';\nconst metadata = $input.item.json.metadata || {};\nconst timestamp = $input.item.json.timestamp || new Date().toISOString();\n\n// Validate required fields\nif (!userId || !actionId) {\n  return {\n    valid: false,\n    error: 'Missing required fields: userId and/or actionId'\n  };\n}\n\nreturn {\n  valid: true,\n  userId,\n  actionId,\n  notes,\n  metadata,\n  timestamp\n};"
      },
      "id": "5b7a50a1-f26b-4985-adcf-73b4aa5f8dc5",
      "name": "Parse Payload",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        650,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json[\"valid\"]}}",
              "value2": true
            }
          ]
        }
      },
      "id": "8d52a12b-c5da-4e7e-b95e-e3daa9dc7ee1",
      "name": "Validate Payload",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        850,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={ \"success\": false, \"message\": $json[\"error\"] }",
        "options": {
          "responseCode": 400
        }
      },
      "id": "63f6e3a9-c93e-461c-8ab2-2b43f41fe80c",
      "name": "Invalid Payload Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1050,
        200
      ]
    },
    {
      "parameters": {
        "operation": "list",
        "application": "===AIRTABLE_BASE_ID===",
        "table": "RewardActions",
        "options": {
          "filterByFormula": "{id}='{{$json[\"actionId\"]}}'",
          "maxRecords": 1
        }
      },
      "id": "8a45b17e-91dc-4e81-8a67-6f48d2ef2b5e",
      "name": "Get Reward Action",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 1,
      "position": [
        1050,
        300
      ],
      "credentials": {
        "airtableApi": {
          "id": "===AIRTABLE_CREDENTIAL_ID===",
          "name": "Airtable account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json[\"records\"].length}}",
              "value2": 0,
              "operation": "larger"
            }
          ]
        }
      },
      "id": "fdd6c98c-05c2-4e8f-8b20-97e6f9dc0eae",
      "name": "Action Found?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1250,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={ \"success\": false, \"message\": \"Reward action not found\" }",
        "options": {
          "responseCode": 404
        }
      },
      "id": "c520a5cd-cf84-4a85-b45c-057e78a39a4e",
      "name": "Action Not Found Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1450,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Extract the action details\nconst action = $input.item.json.records[0].fields;\nconst rewardInput = $input.item.json;\n\n// Check if the action is enabled\nif (!action.IsEnabled) {\n  return {\n    valid: false,\n    error: 'Reward action is disabled'\n  };\n}\n\n// Prepare data for next steps\nreturn {\n  userId: rewardInput.userId,\n  actionId: rewardInput.actionId,\n  notes: rewardInput.notes,\n  metadata: rewardInput.metadata,\n  timestamp: rewardInput.timestamp,\n  actionName: action.Name,\n  actionDescription: action.Description,\n  pointValue: action.PointValue,\n  category: action.Category,\n  requiresApproval: action.RequiresApproval || false,\n  status: action.RequiresApproval ? 'pending' : 'approved'\n};"
      },
      "id": "e4ed0f57-06a6-4b1a-9ffe-48fe3ea72d95",
      "name": "Process Action Details",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1450,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"status\"]}}",
              "value2": "approved"
            }
          ]
        }
      },
      "id": "b41b5d49-4f4e-4b48-ba36-3cab41f6e6da",
      "name": "Needs Approval?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1650,
        300
      ]
    },
    {
      "parameters": {
        "operation": "list",
        "application": "===AIRTABLE_BASE_ID===",
        "table": "UserRewards",
        "options": {
          "filterByFormula": "{UserId}='{{$json[\"userId\"]}}'",
          "maxRecords": 1
        }
      },
      "id": "c2d3e08a-0f56-4c14-89f9-5caa06e61eb5",
      "name": "Get User Rewards",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 1,
      "position": [
        1850,
        300
      ],
      "credentials": {
        "airtableApi": {
          "id": "===AIRTABLE_CREDENTIAL_ID===",
          "name": "Airtable account"
        }
      }
    },
    {
      "parameters": {
        "operation": "create",
        "application": "===AIRTABLE_BASE_ID===",
        "table": "PendingRewards",
        "options": {}
      },
      "id": "df2ecb90-41c9-4ba1-93bf-96874bb8aaea",
      "name": "Create Pending Reward",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 1,
      "position": [
        1850,
        500
      ],
      "credentials": {
        "airtableApi": {
          "id": "===AIRTABLE_CREDENTIAL_ID===",
          "name": "Airtable account"
        }
      },
      "parameters": {
        "fields": {
          "UserId": "={{$json[\"userId\"]}}",
          "ActionId": "={{$json[\"actionId\"]}}",
          "ActionName": "={{$json[\"actionName\"]}}",
          "PointValue": "={{$json[\"pointValue\"]}}",
          "Notes": "={{$json[\"notes\"]}}",
          "Metadata": "={{JSON.stringify($json[\"metadata\"])}}",
          "Timestamp": "={{$json[\"timestamp\"]}}",
          "Status": "pending",
          "CreatedAt": "={{new Date().toISOString()}}"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={ \"success\": true, \"message\": \"Reward action submitted for approval\", \"data\": { \"userId\": $json[\"userId\"], \"actionId\": $json[\"actionId\"], \"status\": \"pending\" } }",
        "options": {
          "responseCode": 202
        }
      },
      "id": "43d59b34-2a36-4e97-aa1c-14f4d906a1e9",
      "name": "Pending Approval Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2050,
        500
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json[\"records\"].length}}",
              "value2": 0,
              "operation": "larger"
            }
          ]
        }
      },
      "id": "05c0f7d2-57fe-4dd7-beec-5e57193e5a6a",
      "name": "User Found?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2050,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Get reward action data\nconst userId = $input.item.json.userId;\nconst actionId = $input.item.json.actionId;\nconst actionName = $input.item.json.actionName;\nconst pointValue = parseInt($input.item.json.pointValue) || 0;\nconst notes = $input.item.json.notes;\nconst metadata = $input.item.json.metadata;\nconst timestamp = $input.item.json.timestamp;\n\n// Create new user record if not found\nconst data = {\n  \"UserId\": userId,\n  \"UserName\": userId, // Placeholder, would be better with actual name\n  \"CurrentPoints\": pointValue,\n  \"LifetimePoints\": pointValue,\n  \"Level\": 1,\n  \"Achievements\": [],\n  \"RecentActions\": [{\n    \"id\": `action_${Date.now()}`,\n    \"actionId\": actionId,\n    \"actionName\": actionName,\n    \"timestamp\": timestamp,\n    \"pointsEarned\": pointValue,\n    \"notes\": notes\n  }],\n  \"CreatedAt\": new Date().toISOString(),\n  \"UpdatedAt\": new Date().toISOString()\n};\n\nreturn data;"
      },
      "id": "9c36b98e-dbb0-46d0-b4a6-8d1adf1b4a04",
      "name": "Prepare New User",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2250,
        200
      ]
    },
    {
      "parameters": {
        "operation": "create",
        "application": "===AIRTABLE_BASE_ID===",
        "table": "UserRewards",
        "options": {}
      },
      "id": "c96d7a2e-50f8-48c8-a5db-3e48f2b3dfa4",
      "name": "Create User Rewards",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 1,
      "position": [
        2450,
        200
      ],
      "credentials": {
        "airtableApi": {
          "id": "===AIRTABLE_CREDENTIAL_ID===",
          "name": "Airtable account"
        }
      },
      "parameters": {
        "fields": {
          "UserId": "={{$json[\"UserId\"]}}",
          "UserName": "={{$json[\"UserName\"]}}",
          "CurrentPoints": "={{$json[\"CurrentPoints\"]}}",
          "LifetimePoints": "={{$json[\"LifetimePoints\"]}}",
          "Level": "={{$json[\"Level\"]}}",
          "Achievements": "={{JSON.stringify($json[\"Achievements\"])}}",
          "RecentActions": "={{JSON.stringify($json[\"RecentActions\"])}}",
          "CreatedAt": "={{$json[\"CreatedAt\"]}}",
          "UpdatedAt": "={{$json[\"UpdatedAt\"]}}"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Get existing user data\nconst userRecord = $input.item.json.records[0];\nconst fields = userRecord.fields;\n\n// Get reward action data\nconst actionId = $input.first().json.actionId;\nconst actionName = $input.first().json.actionName;\nconst pointValue = parseInt($input.first().json.pointValue) || 0;\nconst notes = $input.first().json.notes;\nconst timestamp = $input.first().json.timestamp;\n\n// Update user points\nconst currentPoints = parseInt(fields.CurrentPoints || 0) + pointValue;\nconst lifetimePoints = parseInt(fields.LifetimePoints || 0) + pointValue;\n\n// Calculate new level based on lifetime points\nconst newLevel = Math.floor(Math.sqrt(lifetimePoints / 100)) + 1;\nconst oldLevel = parseInt(fields.Level || 1);\nconst didLevelUp = newLevel > oldLevel;\n\n// Add action to recent actions\nlet recentActions = JSON.parse(fields.RecentActions || '[]');\nrecentActions.unshift({\n  id: `action_${Date.now()}`,\n  actionId: actionId,\n  actionName: actionName,\n  timestamp: timestamp,\n  pointsEarned: pointValue,\n  notes: notes\n});\n\n// Keep only the 50 most recent actions\nif (recentActions.length > 50) {\n  recentActions = recentActions.slice(0, 50);\n}\n\nreturn {\n  id: userRecord.id,\n  userId: fields.UserId,\n  userName: fields.UserName,\n  currentPoints,\n  lifetimePoints,\n  oldLevel,\n  newLevel,\n  didLevelUp,\n  recentActions,\n  achievements: JSON.parse(fields.Achievements || '[]')\n};"
      },
      "id": "b2aa74ff-d683-41c5-ae4a-7fb3e1b74eb1",
      "name": "Process User Rewards Update",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2250,
        300
      ]
    },
    {
      "parameters": {
        "operation": "list",
        "application": "===AIRTABLE_BASE_ID===",
        "table": "Achievements",
        "options": {
          "filterByFormula": "AND({PointThreshold}!=BLANK(), {PointThreshold}<={{$json[\"lifetimePoints\"]}})"
        }
      },
      "id": "e4d4a64e-9a72-4e3c-927a-edb41d1cd0e9",
      "name": "Check For Achievements",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 1,
      "position": [
        2450,
        300
      ],
      "credentials": {
        "airtableApi": {
          "id": "===AIRTABLE_CREDENTIAL_ID===",
          "name": "Airtable account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Get user data\nconst userData = $input.first().json;\n\n// Get potential achievements\nconst potentialAchievements = $input.last().json.records;\n\n// Current user achievements\nconst currentAchievements = userData.achievements || [];\n\n// Find new achievements (not already unlocked)\nconst newAchievements = [];\nconst now = new Date().toISOString();\n\nfor (const achievement of potentialAchievements) {\n  const achievementId = achievement.id;\n  \n  // Check if user already has this achievement\n  const hasAchievement = currentAchievements.some(a => a.achievementId === achievementId);\n  \n  if (!hasAchievement) {\n    // Add new achievement\n    newAchievements.push({\n      id: `ach_${Date.now()}_${achievementId}`,\n      achievementId: achievementId,\n      achievementName: achievement.fields.Name,\n      unlockedAt: now\n    });\n  }\n}\n\n// Combined achievements\nconst updatedAchievements = [...currentAchievements, ...newAchievements];\n\nreturn {\n  id: userData.id,\n  userId: userData.userId,\n  userName: userData.userName,\n  currentPoints: userData.currentPoints,\n  lifetimePoints: userData.lifetimePoints,\n  oldLevel: userData.oldLevel,\n  newLevel: userData.newLevel,\n  didLevelUp: userData.didLevelUp,\n  recentActions: userData.recentActions,\n  achievementsToUpdate: updatedAchievements,\n  newAchievements: newAchievements,\n  hasNewAchievements: newAchievements.length > 0\n};"
      },
      "id": "784a70dc-24a9-4d6d-be9a-1e4df4b9e1cf",
      "name": "Process Achievements",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2650,
        300
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "application": "===AIRTABLE_BASE_ID===",
        "table": "UserRewards",
        "id": "={{$json[\"id\"]}}",
        "options": {}
      },
      "id": "6c1aaad3-beb1-4bfb-b7f1-4686e0d52c03",
      "name": "Update User Rewards",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 1,
      "position": [
        2850,
        300
      ],
      "credentials": {
        "airtableApi": {
          "id": "===AIRTABLE_CREDENTIAL_ID===",
          "name": "Airtable account"
        }
      },
      "parameters": {
        "fields": {
          "CurrentPoints": "={{$json[\"currentPoints\"]}}",
          "LifetimePoints": "={{$json[\"lifetimePoints\"]}}",
          "Level": "={{$json[\"newLevel\"]}}",
          "Achievements": "={{JSON.stringify($json[\"achievementsToUpdate\"])}}",
          "RecentActions": "={{JSON.stringify($json[\"recentActions\"])}}",
          "UpdatedAt": "={{new Date().toISOString()}}"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json[\"didLevelUp\"]}}",
              "value2": true
            }
          ]
        }
      },
      "id": "dec4da30-eb65-474e-8a45-b3c05dbddd0b",
      "name": "Leveled Up?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        3050,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.sendgrid.com/v3/mail/send",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "5a2b4c5a-cd1f-483d-b6f4-b05df98b9b24",
      "name": "Send Level Up Email",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        3250,
        200
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "===SENDGRID_CREDENTIAL_ID===",
          "name": "SendGrid API Key"
        }
      },
      "parameters": {
        "jsonParameters": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "{\n  \"personalizations\": [\n    {\n      \"to\": [\n        {\n          \"email\": \"community@blkout.io\"\n        }\n      ],\n      \"subject\": \"User Level Up Notification\"\n    }\n  ],\n  \"from\": {\n    \"email\": \"rewards@blkout.io\",\n    \"name\": \"BLKOUT Rewards\"\n  },\n  \"content\": [\n    {\n      \"type\": \"text/html\",\n      \"value\": \"<h2>Level Up Notification</h2><p>User {{$json['userName']}} ({{$json['userId']}}) has reached level {{$json['newLevel']}}!</p><p>Current points: {{$json['currentPoints']}}</p><p>Lifetime points: {{$json['lifetimePoints']}}</p>\"\n    }\n  ]\n}"
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json[\"hasNewAchievements\"]}}",
              "value2": true
            }
          ]
        }
      },
      "id": "bd8bc0ce-9aaa-4473-8d3c-08c5c0177bfc",
      "name": "New Achievements?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        3250,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.sendgrid.com/v3/mail/send",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "28e66ae0-c5ad-4db1-a151-c5e5f0f81fff",
      "name": "Send Achievement Email",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        3450,
        300
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "===SENDGRID_CREDENTIAL_ID===",
          "name": "SendGrid API Key"
        }
      },
      "parameters": {
        "jsonParameters": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "{\n  \"personalizations\": [\n    {\n      \"to\": [\n        {\n          \"email\": \"community@blkout.io\"\n        }\n      ],\n      \"subject\": \"User Achievement Unlocked\"\n    }\n  ],\n  \"from\": {\n    \"email\": \"rewards@blkout.io\",\n    \"name\": \"BLKOUT Rewards\"\n  },\n  \"content\": [\n    {\n      \"type\": \"text/html\",\n      \"value\": \"<h2>Achievement Unlocked!</h2><p>User {{$json['userName']}} ({{$json['userId']}}) has unlocked {{$json['newAchievements'].length}} new achievement(s):</p><ul>{{#each $json['newAchievements']}}<li>{{this.achievementName}}</li>{{/each}}</ul>\"\n    }\n  ]\n}"
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={ \"success\": true, \"message\": \"Reward action processed successfully\", \"data\": { \"userId\": $json[\"userId\"], \"actionId\": $input.first().json.actionId, \"pointsAwarded\": $input.first().json.pointValue, \"currentPoints\": $json[\"currentPoints\"], \"lifetimePoints\": $json[\"lifetimePoints\"], \"level\": $json[\"newLevel\"], \"newAchievements\": $json[\"newAchievements\"].map(a => a.achievementName) } }",
        "options": {
          "responseCode": 200
        }
      },
      "id": "4ad14b04-7195-40ab-9b23-e4c073f2cead",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        3650,
        300
      ]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Validate Webhook Key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Webhook Key": {
      "main": [
        [
          {
            "node": "Unauthorized Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Parse Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Payload": {
      "main": [
        [
          {
            "node": "Validate Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Payload": {
      "main": [
        [
          {
            "node": "Invalid Payload Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Reward Action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Reward Action": {
      "main": [
        [
          {
            "node": "Action Found?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Action Found?": {
      "main": [
        [
          {
            "node": "Action Not Found Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process Action Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Action Details": {
      "main": [
        [
          {
            "node": "Needs Approval?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Needs Approval?": {
      "main": [
        [
          {
            "node": "Create Pending Reward",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get User Rewards",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Pending Reward": {
      "main": [
        [
          {
            "node": "Pending Approval Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User Rewards": {
      "main": [
        [
          {
            "node": "User Found?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User Found?": {
      "main": [
        [
          {
            "node": "Prepare New User",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process User Rewards Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare New User": {
      "main": [
        [
          {
            "node": "Create User Rewards",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create User Rewards": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process User Rewards Update": {
      "main": [
        [
          {
            "node": "Check For Achievements",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check For Achievements": {
      "main": [
        [
          {
            "node": "Process Achievements",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Achievements": {
      "main": [
        [
          {
            "node": "Update User Rewards",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update User Rewards": {
      "main": [
        [
          {
            "node": "Leveled Up?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Leveled Up?": {
      "main": [
        [
          {
            "node": "Send Level Up Email",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "New Achievements?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Level Up Email": {
      "main": [
        [
          {
            "node": "New Achievements?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "New Achievements?": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Achievement Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Achievement Email": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": false,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "",
    "timezone": "UTC"
  },
  "pinData": {},
  "versionId": "",
  "triggerCount": 0,
  "staticData": null,
  "tags": [
    {
      "name": "rewards",
      "createdAt": "2023-09-25T12:34:56.789Z"
    },
    {
      "name": "webhook",
      "createdAt": "2023-09-25T12:34:56.789Z"
    },
    {
      "name": "BLKOUT",
      "createdAt": "2023-09-25T12:34:56.789Z"
    }
  ],
  "metadata": {
    "templateCredsSetupCompleted": false
  }
}