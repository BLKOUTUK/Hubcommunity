{
  "name": "Feedback Collection Integration",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "feedback-webhook",
        "options": {
          "responseMode": "responseNode"
        }
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node[\"Webhook\"].json[\"body\"][\"type\"]}}",
              "operation": "exists"
            }
          ]
        }
      },
      "name": "Is Valid Feedback",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Get feedback details from the webhook\nconst feedback = $input.item.json.body;\n\n// Ensure required fields are present\nif (!feedback.userId || !feedback.text) {\n  return {\n    valid: false,\n    message: \"Missing required fields: userId and text are required\"\n  };\n}\n\n// Validate feedback type\nconst validTypes = ['general', 'feature', 'bug', 'content', 'event', 'survey'];\nif (!validTypes.includes(feedback.type)) {\n  return {\n    valid: false,\n    message: `Invalid feedback type: ${feedback.type}. Must be one of: ${validTypes.join(', ')}`\n  };\n}\n\n// Validate rating if present\nif (feedback.rating !== undefined) {\n  const rating = Number(feedback.rating);\n  if (isNaN(rating) || rating < 1 || rating > 5) {\n    return {\n      valid: false,\n      message: \"Rating must be a number between 1 and 5\"\n    };\n  }\n}\n\n// Prepare feedback object with defaults\nconst processedFeedback = {\n  userId: feedback.userId,\n  userName: feedback.userName || 'Anonymous',\n  type: feedback.type,\n  rating: feedback.rating !== undefined ? Number(feedback.rating) : undefined,\n  text: feedback.text,\n  metadata: feedback.metadata || {},\n  timestamp: feedback.timestamp || new Date().toISOString(),\n  source: 'BLKOUTHUB'\n};\n\n// Define point values for feedback\nconst FEEDBACK_POINTS = {\n  general: 5,\n  feature: 10,\n  bug: 10,\n  content: 8,\n  event: 8,\n  survey: 15\n};\n\n// Determine points to award\nconst points = FEEDBACK_POINTS[processedFeedback.type] || 5;\n\nreturn {\n  valid: true,\n  feedback: processedFeedback,\n  points: points,\n  description: `Submitted ${processedFeedback.type} feedback`\n};"
      },
      "name": "Process Feedback",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        650,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$node[\"Process Feedback\"].json[\"valid\"]}}",
              "value2": true
            }
          ]
        }
      },
      "name": "Is Valid",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        850,
        200
      ]
    },
    {
      "parameters": {
        "url": "={{$env.VITE_API_URL}}/feedback/submit",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{$env.API_TOKEN}}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "feedback",
              "value": "={{$node[\"Process Feedback\"].json[\"feedback\"]}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Store Feedback API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1050,
        100
      ]
    },
    {
      "parameters": {
        "url": "={{$env.VITE_API_URL}}/rewards/award-points",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{$env.API_TOKEN}}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "userId",
              "value": "={{$node[\"Process Feedback\"].json[\"feedback\"][\"userId\"]}}"
            },
            {
              "name": "points",
              "value": "={{$node[\"Process Feedback\"].json[\"points\"]}}"
            },
            {
              "name": "description",
              "value": "={{$node[\"Process Feedback\"].json[\"description\"]}}"
            },
            {
              "name": "metadata",
              "value": "={ \"feedbackType\": $node[\"Process Feedback\"].json.feedback.type, \"source\": \"BLKOUTHUB\" }"
            }
          ]
        },
        "options": {}
      },
      "name": "Award Points API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1250,
        100
      ]
    },
    {
      "parameters": {
        "functionCode": "// Create success response\nreturn {\n  statusCode: 200,\n  body: {\n    success: true,\n    message: \"Feedback submitted successfully\",\n    feedbackId: $node[\"Store Feedback API\"].json.id || \"unknown\",\n    pointsAwarded: $node[\"Process Feedback\"].json.points\n  }\n};"
      },
      "name": "Success Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1450,
        100
      ]
    },
    {
      "parameters": {
        "functionCode": "// Create error response for invalid feedback\nreturn {\n  statusCode: 400,\n  body: {\n    success: false,\n    message: $node[\"Process Feedback\"].json.message || \"Invalid feedback submission\"\n  }\n};"
      },
      "name": "Error - Invalid Feedback",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1050,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Create error response for missing feedback data\nreturn {\n  statusCode: 400,\n  body: {\n    success: false,\n    message: \"Missing feedback data in request body\"\n  }\n};"
      },
      "name": "Error - Missing Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        650,
        400
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$node[\"Success Response\"].json.body}}",
        "options": {
          "statusCode": "={{$node[\"Success Response\"].json.statusCode}}"
        }
      },
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1650,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{$env.VITE_HEARTBEAT_API_URL}}/feedback",
        "method": "POST",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "userId",
              "value": "={{$node[\"Process Feedback\"].json[\"feedback\"][\"userId\"]}}"
            },
            {
              "name": "type",
              "value": "={{$node[\"Process Feedback\"].json[\"feedback\"][\"type\"]}}"
            },
            {
              "name": "rating",
              "value": "={{$node[\"Process Feedback\"].json[\"feedback\"][\"rating\"]}}"
            },
            {
              "name": "text",
              "value": "={{$node[\"Process Feedback\"].json[\"feedback\"][\"text\"]}}"
            },
            {
              "name": "metadata",
              "value": "={{$node[\"Process Feedback\"].json[\"feedback\"][\"metadata\"]}}"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {
              "followRedirects": true
            }
          }
        }
      },
      "name": "Sync with Heartbeat",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1250,
        -50
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "1",
          "name": "Heartbeat API"
        }
      }
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Is Valid Feedback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Valid Feedback": {
      "main": [
        [
          {
            "node": "Process Feedback",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error - Missing Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Feedback": {
      "main": [
        [
          {
            "node": "Is Valid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Valid": {
      "main": [
        [
          {
            "node": "Store Feedback API",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error - Invalid Feedback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Feedback API": {
      "main": [
        [
          {
            "node": "Award Points API",
            "type": "main",
            "index": 0
          },
          {
            "node": "Sync with Heartbeat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Award Points API": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Response": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error - Invalid Feedback": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error - Missing Data": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "",
  "id": "feedback-collection",
  "meta": {
    "instanceId": "heartbeat-integration"
  },
  "tags": [
    {
      "name": "heartbeat",
      "color": "#ff6d6d"
    },
    {
      "name": "feedback",
      "color": "#31c45b"
    }
  ]
}